#!/usr/bin/env python

"""
Controls the Apsis Agent, the component responsible for running child programs.
For debugging and maintenance only.
"""

import argparse
import asyncio
import json
import logging
import sys

from   apsis.agent.client import Agent

#-------------------------------------------------------------------------------

def sync(coro):
    task = asyncio.ensure_future(coro)
    asyncio.get_event_loop().run_until_complete(task)
    return task.result()


async def clean(agent):
    processes = await agent.get_processes()
    return await asyncio.gather(*(
        agent.del_process(p["proc_id"]) for p in processes ))


logging.basicConfig(
    level="INFO",
    format="%(asctime)s %(name)-18s [%(levelname)-7s] %(message)s",
    datefmt="%H:%M:%S",
)    

parser = argparse.ArgumentParser(description=__doc__)
commands = parser.add_subparsers(title="commands")
parser.set_defaults(cmd=None)

parser.add_argument(
    "--host", metavar="HOST", default=None,
    help="run agent on remote HOST [def: local]")
parser.add_argument(
    "--user", metavar="USER", default=None,
    help="run agent as USER [def: this user]")

cmd = commands.add_parser("start")
cmd.set_defaults(cmd="start")

cmd = commands.add_parser("list")
cmd.set_defaults(cmd="list")

cmd = commands.add_parser("get")
cmd.add_argument("proc_id")
cmd.set_defaults(cmd="get")

cmd = commands.add_parser("del")
cmd.add_argument("proc_id")
cmd.set_defaults(cmd="del")

cmd = commands.add_parser("stop")
cmd.set_defaults(cmd="stop")

cmd = commands.add_parser("clean")
cmd.set_defaults(cmd="clean")

args = parser.parse_args()
agent = Agent(host=args.host, user=args.user, restart=False)
sync(agent.start())

if args.cmd is None:
    # Nothing to do.
    raise SystemExit(0)
elif args.cmd == "start":
    result = agent.start()
elif args.cmd == "list":
    result = agent.get_processes()
elif args.cmd == "get":
    result = agent.get_process(args.proc_id)
elif args.cmd == "del":
    result = agent.del_process(args.proc_id)
elif args.cmd == "stop":
    result = agent.stop()
elif args.cmd == "clean":
    result = clean(agent)

try:
    result = sync(result)
except RuntimeError as exc:
    logging.error(f"{args.cmd} failed", exc_info=True)
else:
    try:
        json.dump(result, sys.stdout, indent=2)
        print()
    except TypeError:
        print(result)


