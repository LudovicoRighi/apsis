#!/usr/bin/env python

import argparse
import fixfmt.table
import logging
from   ora import Time
import ruamel_yaml as yaml

import apsis.service.client

#-------------------------------------------------------------------------------

def print_lines(lines):
    for line in lines:
        print(line)


def prefix(prefix, lines):
    for line in lines:
        yield prefix + line


def format_jso(jso, indent=0):
    ind = " " * indent
    wid = 12 - indent
    for key, value in jso.items():
        yield f"{ind}{key:{wid}s}: {value}"


def format_program(program, indent=0):
    yield from format_jso(program, indent=indent)


def format_schedule(schedule, indent=0):
    yield from format_jso(schedule, indent=indent)


def format_job(job):
    fmt = lambda k, v: f"{k:12s}: {v}"
    yield fmt("job_id", job["job_id"])
    yield fmt("url", job["url"])
    yield fmt("params", ", ".join(job["params"]))
    yield "program"
    yield from format_program(job["program"], indent=2)
    yield "schedules"
    for schedule in job["schedules"]:
        yield from format_schedule(schedule, indent=2)


def format_run(run, indent=0):
    yield from yaml.dump(run, default_flow_style=False).splitlines()


def format_elapsed(secs):
    secs = round(secs)
    if secs < 3600:
        return f"   {secs // 60:2d}:{secs % 60:02d}"
    else:
        return f"{secs // 3600:2d}:{secs // 60 % 60:02d}:{secs % 60:02d}"
    # FIXME: Add formats for longer times.

format_elapsed.width = 8


def format_time(time):
    return format(Time(time), "%D %C@")

format_time.width = 19


#-------------------------------------------------------------------------------

logging.basicConfig(level=logging.INFO)

parser = argparse.ArgumentParser()
parser.add_argument(
    "--host", metavar="HOST", default="localhost",
    help="connect to HOST [def: localhost]")
parser.add_argument(
    "--port", metavar="PORT", default=apsis.service.DEFAULT_PORT,
    help=f"connect to PORT [def: {apsis.service.DEFAULT_PORT}]")
commands = parser.add_subparsers(title="commands")

#--- command: job --------------------------------------------------------------

def cmd_job(client, args):
    job_id = args.job  # FIXME
    job = client.get_job(job_id)
    print_lines(format_job(job))


cmd = commands.add_parser(
    "job",
    description="Displays a job.")
cmd.add_argument(
    "job", metavar="JOB-ID")
cmd.set_defaults(cmd=cmd_job)

#--- command: jobs -------------------------------------------------------------

def cmd_jobs(client, args):
    jobs = client.get_jobs()

    table = fixfmt.table.RowTable()
    table.extend(
        {
            "job_id": job["job_id"],
            "params": ", ".join(job["params"]),
        }
        for job in jobs
    )
    table.print()
    print()


cmd = commands.add_parser(
    "jobs",
    description="ists all jobs.")
cmd.set_defaults(cmd=cmd_jobs)

#--- command: run --------------------------------------------------------------

def cmd_run(client, args):
    run_id = args.run  # FIXME
    run = client.get_run(run_id)
    print_lines(format_run(run))


cmd = commands.add_parser(
    "run",
    description="Displays a run.")
cmd.add_argument(
    "run", metavar="RUN-ID")
cmd.set_defaults(cmd=cmd_run)

#--- command: runs -------------------------------------------------------------

def cmd_runs(client, arg):
    job_id = args.job  # FIXME
    runs = client.get_job_runs(job_id)

    table = fixfmt.table.RowTable()

    table.extend(
        {
            "run_id"    : run["run_id"],
            **run["args"],
            "start"     : run["times"].get("running", run["times"]["schedule"]),
            "state"     : run["state"],
            "elapsed"   : run["meta"].get("elapsed"),
        }
        for run in sorted(runs.values(), key=lambda r: r["times"]["schedule"])
    )
    table.fmts["start"] = format_time
    table.fmts["elapsed"] = format_elapsed
    table.print()
    print()


cmd = commands.add_parser(
    "runs",
    description="Displays runs of a job.")
cmd.add_argument(
    "job", metavar="JOB-ID")
cmd.set_defaults(cmd=cmd_runs)

#--- command: schedule ---------------------------------------------------------

def cmd_schedule(client, args):
    # FIXME: Accept daytimes.
    if args.shell:
        assert False  # FIXME
    else:
        run = client.schedule_command(args.time, args.command)
    print_lines(format_run(run))


cmd = commands.add_parser(
    "schedule", 
    description="Schedules a custom ad hoc run.")
cmd.add_argument(
    "time", metavar="TIME",
    help="time to run, or NOW")
cmd.add_argument(
    "command", metavar="CMD...", nargs="+",
    help="command to run")
cmd.add_argument(
    "--shell", action="store_true", default=False,
    help="treat CMD as shell code (contactenated)")
cmd.set_defaults(cmd=cmd_schedule)

#-------------------------------------------------------------------------------

args = parser.parse_args()
client = apsis.service.client.Client(host=args.host, port=args.port)
args.cmd(client, args)

