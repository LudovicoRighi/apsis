#!/usr/bin/env python

import argparse
import fixfmt.table
import logging
from   ora import Time, now
import ruamel_yaml as yaml

import apsis.service.client

#-------------------------------------------------------------------------------

def print_lines(lines):
    for line in lines:
        print(line)


def prefix(prefix, lines):
    for line in lines:
        yield prefix + line


def format_jso(jso, indent=0):
    ind = " " * indent
    wid = 12 - indent
    for key, value in jso.items():
        yield f"{ind}{key:{wid}s}: {value}"


def format_program(program, indent=0):
    yield from format_jso(program, indent=indent)


def format_schedule(schedule, indent=0):
    yield from format_jso(schedule, indent=indent)


def format_job(job):
    fmt = lambda k, v: f"{k:12s}: {v}"
    yield fmt("job_id", job["job_id"])
    yield fmt("url", job["url"])
    yield fmt("params", ", ".join(job["params"]))
    yield "program"
    yield from format_program(job["program"], indent=2)
    yield "schedules"
    for schedule in job["schedules"]:
        yield from format_schedule(schedule, indent=2)


def format_run(run, indent=0):
    yield from yaml.dump(run, default_flow_style=False).splitlines()


def format_elapsed(secs):
    secs = round(secs)
    if secs < 3600:
        return f"   {secs // 60:2d}:{secs % 60:02d}"
    else:
        return f"{secs // 3600:2d}:{secs // 60 % 60:02d}:{secs % 60:02d}"
    # FIXME: Add formats for longer times.

format_elapsed.width = 8


def format_time(time):
    return format(Time(time), "%D %C@")

format_time.width = 19


#-------------------------------------------------------------------------------

def cmd_jobs_list(client, args):
    jobs = client.get_jobs()

    table = fixfmt.table.RowTable()
    table.extend(
        {
            "job_id": job["job_id"],
            "params": ", ".join(job["params"]),
        }
        for job in jobs
    )
    table.print()
    print()


def cmd_job_runs(client, arg):
    job_id = args.job  # FIXME
    runs = client.get_job_runs(job_id)

    table = fixfmt.table.RowTable()

    def get_elapsed_time(run):
        try:
            execute_time = Time(run["times"]["execute"])
        except KeyError:
            return None
        else:
            return Time(run["times"].get("done", now())) - execute_time
        
    table.extend(
        {
            "run_id"    : run["run_id"],
            **run["args"],
            "start"     : run["times"].get("running", run["times"]["schedule"]),
            "state"     : run["state"],
            "elapsed"   : get_elapsed_time(run),
        }
        for run in sorted(runs.values(), key=lambda r: r["times"]["schedule"])
    )
    table.fmts["start"] = format_time
    table.fmts["elapsed"] = format_elapsed
    table.print()
    print()


def cmd_job_show(client, args):
    job_id = args.job  # FIXME
    job = client.get_job(job_id)
    print_lines(format_job(job))


#-------------------------------------------------------------------------------

def cmd_run_show(client, args):
    run_id = args.run  # FIXME
    run = client.get_run(run_id)
    print_lines(format_run(run))


#-------------------------------------------------------------------------------

logging.basicConfig(level=logging.INFO)

parser = argparse.ArgumentParser()
parser.add_argument(
    "--host", metavar="HOST", default="localhost",
    help="connect to HOST [def: localhost]")
parser.add_argument(
    "--port", metavar="PORT", default=apsis.service.DEFAULT_PORT,
    help=f"connect to PORT [def: {apsis.service.DEFAULT_PORT}]")
commands = parser.add_subparsers(title="commands")


cmd = commands.add_parser("jobs")
jobs_commands = cmd.add_subparsers(title="jobs commands")

cmd = jobs_commands.add_parser("list")
cmd.set_defaults(cmd=cmd_jobs_list)


cmd = commands.add_parser("job")
cmd.add_argument(
    "job", metavar="JOB-ID")
job_commands = cmd.add_subparsers(title="job commands")

cmd = job_commands.add_parser("show")
cmd.set_defaults(cmd=cmd_job_show)

cmd = job_commands.add_parser("runs")
cmd.set_defaults(cmd=cmd_job_runs)


cmd = commands.add_parser("run")
cmd.add_argument(
    "run", metavar="RUN-ID")
run_commands = cmd.add_subparsers(title="run commands")

cmd = run_commands.add_parser("show")
cmd.set_defaults(cmd=cmd_run_show)


args = parser.parse_args()

client = apsis.service.client.Client(host=args.host, port=args.port)
args.cmd(client, args)

