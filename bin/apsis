#!/usr/bin/env python

import argparse
import fixfmt
import logging
import ruamel_yaml as yaml

import apsis.service.client

#-------------------------------------------------------------------------------

def print_lines(lines):
    for line in lines:
        print(line)


def prefix(prefix, lines):
    for line in lines:
        yield prefix + line


def format_jso(jso, indent=0):
    ind = " " * indent
    wid = 12 - indent
    for key, value in jso.items():
        yield f"{ind}{key:{wid}s}: {value}"


def format_program(program, indent=0):
    yield from format_jso(program, indent=indent)


def format_schedule(schedule, indent=0):
    yield from format_jso(schedule, indent=indent)


def format_job(job):
    fmt = lambda k, v: f"{k:12s}: {v}"
    yield fmt("job_id", job["job_id"])
    yield fmt("url", job["url"])
    yield fmt("params", ", ".join(job["params"]))
    yield "program"
    yield from format_program(job["program"], indent=2)
    yield "schedules"
    for schedule in job["schedules"]:
        yield from format_schedule(schedule, indent=2)


def format_run(run, indent=0):
    # yield from format_jso(run, indent=indent)
    yield from yaml.dump(run, default_flow_style=False).splitlines()


#-------------------------------------------------------------------------------

class Table:

    def __init__(self, **cols):
        self.__cols = cols


    @property
    def header(self):
        return " ".join( n.ljust(f.width) for n, f in self.__cols.items() )


    def underline(self, char="-"):
        assert len(char) == 1
        return " ".join( char * f.width for f in self.__cols.values() )


    def row(self, **vals):
        return " ".join( f(vals[n]) for n, f in self.__cols.items() )




#-------------------------------------------------------------------------------

def cmd_jobs_list(client, args):
    for job in client.get_jobs():
        print_lines(format_job(job))
        print()


def cmd_job_runs(client, arg):
    job_id = args.job  # FIXME
    job = client.get_job(job_id)
    runs = client.get_job_runs(job_id)
    # for run in runs.values():
    #     print_lines(format_run(run))
    #     print()
    table = Table(
        run_id=fixfmt.String(12), 
        **{ p: fixfmt.String(12) for p in job["params"] },
        state=fixfmt.String(8),
    )
    print(table.header)
    print(table.underline())
    for run in runs.values():
        print(table.row(
            run_id=run["run_id"],
            **run["args"],
            state=run["state"],
        ))


def cmd_job_show(client, args):
    job_id = args.job  # FIXME
    job = client.get_job(job_id)
    print_lines(format_job(job))


#-------------------------------------------------------------------------------

logging.basicConfig(level=logging.INFO)

parser = argparse.ArgumentParser()
parser.add_argument(
    "--host", metavar="HOST", default="localhost",
    help="connect to HOST [def: localhost]")
parser.add_argument(
    "--port", metavar="PORT", default=apsis.service.DEFAULT_PORT,
    help=f"connect to PORT [def: {apsis.service.DEFAULT_PORT}]")
commands = parser.add_subparsers(title="commands")


cmd = commands.add_parser("jobs")
jobs_commands = cmd.add_subparsers(title="jobs commands")

cmd = jobs_commands.add_parser("list")
cmd.set_defaults(cmd=cmd_jobs_list)


cmd = commands.add_parser("job")
cmd.add_argument(
    "job", metavar="JOB-ID")
job_commands = cmd.add_subparsers(title="job commands")

cmd = job_commands.add_parser("show")
cmd.set_defaults(cmd=cmd_job_show)

cmd = job_commands.add_parser("runs")
cmd.set_defaults(cmd=cmd_job_runs)


args = parser.parse_args()

client = apsis.service.client.Client(host=args.host, port=args.port)
args.cmd(client, args)

